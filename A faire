Fractale de Paul :

Fractale du flocon de VonKoch 1 :

import turtle as tl

def courbeVonKoch(  n, cote  ) :
	if n == 0 :
		tl.forward(cote)
	else :
		courbeVonKoch(n-1, cote/3)
		tl.left(60)
		courbeVonKoch(n-1, cote/3)
		tl.left(-120)
		courbeVonKoch(n-1, cote/3)
		tl.left(60)
		courbeVonKoch(n-1, cote/3)


def flocon(n, cote) :
	for _ in range(3) :
		courbeVonKoch(  n, cote  )
		tl.left(-120)

tl.setheading(0) 
tl.hideturtle() 
tl.speed(0)	 
tl.color('green')
flocon(  n = 3, cote = 200  )
tl.exitonclick() 


Fractale du flocon de VonKoch 2 :

import turtle as tl


def courbeVonKoch(  n, cote  ) :
	if n == 0 :
		tl.forward(cote)
	else :
		courbeVonKoch(n-1, cote/3)
		tl.left(90)
		courbeVonKoch(n-1, cote/3)
		tl.right(90)
		courbeVonKoch(n-1, cote/3)
		tl.right(90)
		courbeVonKoch(n-1, cote/3)
		tl.left(90)
		courbeVonKoch(n-1, cote/3)


def flocon(n, cote) :
	for _ in range(3) :
		courbeVonKoch(  n, cote  )
		tl.left(-120)

tl.setheading(0) 
tl.hideturtle() 
tl.speed(0)	 
tl.color('green')
flocon(  n = 4, cote = 200  )
tl.exitonclick() 


Fractale de sierpinski :

from turtle import *

def sierpinski(n, l):
    if n == 0:
        for _ in range(3):
            forward(l)
            left(120)
    else:
        l /= 2.0
        sierpinski(n - 1, l)  
        forward(l)
        sierpinski(n - 1, l)  
        backward(l)
        left(60)
        forward(l)
        right(60)
        sierpinski(n - 1, l)  
        left(60)
        backward(l)
        right(60)

hideturtle()
speed('fastest')
sierpinski(5, 300)
mainloop()


Fracctale carré :

import turtle as t

def carre(cote) :
    for _ in range(4) :
        t.forward(cote)
        t.left(90)

def imbrique(cote, n) :
    if n > 0 :
        carre(cote)
        t.penup() 
        t.forward(cote//2) 
        t.left(45) 
        t.pendown()
        imbrique(cote/2**0.5, n-1)


t.title("Carrés imbriqués")    
t.hideturtle() 
t.speed(0)
t.pencolor("orange")

cote = 200
nombreDeCarres = 10
imbrique( cote , nombreDeCarres)
t.exitonclick()


Fractale du dragon :

import turtle
turtle.speed(10000)
turtle.hideturtle()
wn=turtle.Screen()
turtle.pencolor("green")
 
def dragoncurve(l,n):
  def x(n):
    if n==0:
      return
    x(n-1)
    turtle.right(90)
    y(n-1)
    turtle.forward(l)
  def y(n):
    if n==0:
      return
    turtle.forward(l)
    x(n-1)
    turtle.left(90)
    y(n-1)
  turtle.fd(l)
  x(n)
dragoncurve(5,15)

Fractale Cercle :

import turtle

turtle.pensize(3)
turtle.speed(10)   

n = 10
rayon = 0
for k in range(n):
    rayon += 10                # le rayon augmente à chaque tour
    turtle.circle(rayon, 180)  # un demi-cercle
    turtle.stamp()             # pour laisser une marque de la tortue

turtle.done()
